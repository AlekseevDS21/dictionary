import os
import logging
import requests
import io
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_HOST = os.getenv("API_HOST", "cambridge-api")
API_PORT = os.getenv("API_PORT", "8000")

API_URL = f"http://{API_HOST}:{API_PORT}"

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
MAX_MESSAGE_LENGTH = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç 4096)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Å–ª–æ–≤ –≤ Cambridge Dictionary. "
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–º–æ—â—å –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help."""
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ Cambridge Dictionary."
    )

def split_message(text, max_length=MAX_MESSAGE_LENGTH):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∞–±–∑–∞—Ü–∞–º –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è
    paragraphs = text.split('\n\n')
    
    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –∞–±–∑–∞—Ü —Å–∞–º –ø–æ —Å–µ–±–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        if len(paragraph) > max_length:
            lines = paragraph.split('\n')
            for line in lines:
                # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–µ –ø–æ —á–∞—Å—Ç—è–º
                if len(line) > max_length:
                    for i in range(0, len(line), max_length):
                        chunk = line[i:i+max_length]
                        if len(current_part + chunk) > max_length:
                            parts.append(current_part)
                            current_part = chunk
                        else:
                            current_part += chunk
                else:
                    if len(current_part + '\n' + line) > max_length:
                        parts.append(current_part)
                        current_part = line
                    else:
                        current_part = current_part + '\n' + line if current_part else line
        else:
            if len(current_part + '\n\n' + paragraph) > max_length:
                parts.append(current_part)
                current_part = paragraph
            else:
                current_part = current_part + '\n\n' + paragraph if current_part else paragraph
    
    if current_part:
        parts.append(current_part)
    
    return parts

async def download_and_send_audio(update, audio_url, caption="", voice_type="US"):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –ø–æ URL –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç."""
    try:
        response = requests.get(
            audio_url, 
            stream=True,
            headers={"User-Agent": "Mozilla/5.0"},  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            verify=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL
        )
        response.raise_for_status()
        
        audio_data = io.BytesIO(response.content)
        audio_data.name = f"pronunciation_{voice_type}.mp3"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
        await update.message.reply_voice(
            voice=audio_data, 
            caption=caption,
            filename=audio_data.name
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {e}")
        return False

async def search_word(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–∏—Å."""
    word = update.message.text.strip().lower()
    
    if not word:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    
    await update.message.reply_text(f"–ò—â—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ '{word}'...")
    
    try:
        response = requests.get(f"{API_URL}/search/{word}", timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if "error" in data:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {data['error']}")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = f"üìö *{data['word'].capitalize()}*\n\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ —Ä–µ—á–∏
        if "pos" in data and data["pos"]:
            result += f"üî§ *–ß–∞—Å—Ç—å —Ä–µ—á–∏:* {', '.join(data['pos'])}\n\n"
        
        # –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
        if "pronunciation" in data and data["pronunciation"]:
            result += "*–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ:*\n"
            unique_prons = {}
            for pron in data["pronunciation"]:
                key = f"{pron['lang']}-{pron['pron']}"
                if key not in unique_prons:
                    unique_prons[key] = pron
            
            for key, pron in unique_prons.items():
                lang_label = "üá¨üáß UK" if pron['lang'] == 'uk' else "üá∫üá∏ US" if pron['lang'] == 'us' else pron['lang'].upper()
                result += f"{lang_label}: {pron['pron']}\n"
            result += "\n"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if "definition" in data and data["definition"]:
            result += "*–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:*\n"
            for i, definition in enumerate(data["definition"], 1):
                pos = f" ({definition['pos']})" if 'pos' in definition and definition['pos'] else ""
                result += f"{i}.{pos} {definition['text']}\n"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥
                if "translation" in definition and definition["translation"]:
                    result += f"   _–ü–µ—Ä–µ–≤–æ–¥:_ {definition['translation']}\n"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã
                if "example" in definition and definition["example"]:
                    result += "   _–ü—Ä–∏–º–µ—Ä—ã:_\n"
                    for ex in definition["example"][:3]:
                        result += f"   ‚Ä¢ {ex['text']}\n"
                        if 'translation' in ex and ex['translation']:
                            result += f"     {ex['translation']}\n"
                    result += "\n"
        else:
            result += "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        message_parts = split_message(result)
        
        for i, part in enumerate(message_parts):
            if i == 0:
                # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                await update.message.reply_text(part, parse_mode="Markdown")
            else:
                # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Å—Ç–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
                await update.message.reply_text(f"(–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i+1}/{len(message_parts)})\n\n{part}", parse_mode="Markdown")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if "pronunciation" in data and data["pronunciation"]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º UK –∏ US –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            uk_pron = next((p for p in data["pronunciation"] if p["lang"] == "uk"), None)
            us_pron = next((p for p in data["pronunciation"] if p["lang"] == "us"), None)
            
            if uk_pron:
                await download_and_send_audio(
                    update, 
                    uk_pron["url"], 
                    f"üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '{data['word']}'",
                    "UK"
                )
            
            if us_pron and (not uk_pron or us_pron["url"] != uk_pron["url"]):
                await download_and_send_audio(
                    update, 
                    us_pron["url"], 
                    f"üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '{data['word']}'",
                    "US"
                )
    
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É —Å–ª–æ–≤–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_word))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
